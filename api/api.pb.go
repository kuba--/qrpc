// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	SendRequest
	SendResponse
	ReceiveRequest
	ReceiveResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SendRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Msg   []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *SendRequest) Reset()                    { *m = SendRequest{} }
func (m *SendRequest) String() string            { return proto.CompactTextString(m) }
func (*SendRequest) ProtoMessage()               {}
func (*SendRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SendResponse struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ReceiveRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
}

func (m *ReceiveRequest) Reset()                    { *m = ReceiveRequest{} }
func (m *ReceiveRequest) String() string            { return proto.CompactTextString(m) }
func (*ReceiveRequest) ProtoMessage()               {}
func (*ReceiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReceiveResponse struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Msg []byte `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ReceiveResponse) Reset()                    { *m = ReceiveResponse{} }
func (m *ReceiveResponse) String() string            { return proto.CompactTextString(m) }
func (*ReceiveResponse) ProtoMessage()               {}
func (*ReceiveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*SendRequest)(nil), "api.SendRequest")
	proto.RegisterType((*SendResponse)(nil), "api.SendResponse")
	proto.RegisterType((*ReceiveRequest)(nil), "api.ReceiveRequest")
	proto.RegisterType((*ReceiveResponse)(nil), "api.ReceiveResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for QRPC service

type QRPCClient interface {
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
}

type qRPCClient struct {
	cc *grpc.ClientConn
}

func NewQRPCClient(cc *grpc.ClientConn) QRPCClient {
	return &qRPCClient{cc}
}

func (c *qRPCClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := grpc.Invoke(ctx, "/api.QRPC/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qRPCClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	out := new(ReceiveResponse)
	err := grpc.Invoke(ctx, "/api.QRPC/Receive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for QRPC service

type QRPCServer interface {
	Send(context.Context, *SendRequest) (*SendResponse, error)
	Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error)
}

func RegisterQRPCServer(s *grpc.Server, srv QRPCServer) {
	s.RegisterService(&_QRPC_serviceDesc, srv)
}

func _QRPC_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QRPCServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _QRPC_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(QRPCServer).Receive(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _QRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.QRPC",
	HandlerType: (*QRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _QRPC_Send_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _QRPC_Receive_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 177 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x06, 0x32, 0x95, 0x34, 0xb9, 0xb8, 0x83, 0x53, 0xf3,
	0x52, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x78, 0xb9, 0x58, 0x4b, 0xf2, 0x0b, 0x32,
	0x93, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x85, 0xb8, 0xb9, 0x98, 0x73, 0x8b, 0xd3, 0x25, 0x98,
	0x80, 0x1c, 0x1e, 0x25, 0x69, 0x2e, 0x1e, 0x88, 0xd2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x90,
	0x64, 0x76, 0x6a, 0x25, 0x44, 0xa5, 0x92, 0x3c, 0x17, 0x5f, 0x50, 0x6a, 0x72, 0x6a, 0x66, 0x59,
	0x2a, 0x76, 0xa3, 0x94, 0xb4, 0xb9, 0xf8, 0xe1, 0x0a, 0xb0, 0x18, 0x80, 0x62, 0x95, 0x51, 0x2e,
	0x17, 0x4b, 0x60, 0x50, 0x80, 0xb3, 0x90, 0x2e, 0x17, 0x0b, 0xc8, 0x4a, 0x21, 0x01, 0x3d, 0x90,
	0xb3, 0x91, 0x1c, 0x2a, 0x25, 0x88, 0x24, 0x02, 0x31, 0x4e, 0x89, 0x41, 0xc8, 0x8c, 0x8b, 0x1d,
	0x6a, 0x87, 0x90, 0x30, 0x58, 0x1e, 0xd5, 0x49, 0x52, 0x22, 0xa8, 0x82, 0x30, 0x7d, 0x49, 0x6c,
	0xe0, 0x00, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf6, 0xec, 0x13, 0x8b, 0x1d, 0x01, 0x00,
	0x00,
}
